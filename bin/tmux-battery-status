#!/bin/bash
set -euo pipefail

count=0
charge=0
discharging=true

case "${OSTYPE}" in
  darwin*)
    while IFS= read -r line; do
      if [ "${discharging}" != "true" ]; then
        discharging=$(printf '%s' "${line}" | grep -qi "discharging" && echo "true" || echo "false")
      fi
      percentage=$(printf '%s' "${line}" | grep -E -o '[0-9]+%')
      charge=$(awk -v charge="${charge}" -v percentage="${percentage%%%}" 'BEGIN { print charge + percentage / 100 }')
      count=$((count + 1))
    done << EOF
$(pmset -g batt | grep 'InternalBattery')
EOF
  ;;
  linux*)
    while IFS= read -r batpath; do
      grep -i -q device "${batpath}/scope" 2> /dev/null && continue

      if [ "${discharging}" != "true" ]; then
        discharging=$(grep -qi "discharging" "${batpath}/status" && echo "true" || echo "false")
      fi
      bat_capacity="${batpath}/capacity"
      if [ -r "${bat_capacity}" ]; then
        charge=$(awk -v charge="${charge}" -v capacity="$(cat "${bat_capacity}")" 'BEGIN { print charge + capacity / 100 }')
      else
        bat_energy_full="${batpath}/energy_full"
        bat_energy_now="${batpath}/energy_now"
        if [ -r "${bat_energy_full}" ] && [ -r "${bat_energy_now}" ]; then
          charge=$(awk -v charge="${charge}" -v energy_now="$(cat "${bat_energy_now}")" -v energy_full="$(cat "${bat_energy_full}")" 'BEGIN { print charge + energy_now / energy_full }')
        fi
      fi
      count=$((count + 1))
    done << EOF
$(find /sys/class/power_supply -maxdepth 1 -iname '*bat*')
EOF
esac

[ "${count}" -ne 0 ] && charge=$(awk -v charge="${charge}" -v count="${count}" 'BEGIN { print charge / count }')

battery_bar_symbol_full="â—¼"
battery_bar_symbol_empty="â—»"
battery_bar_length="auto"
battery_bar_palette="gradient"
battery_status_charging="ðŸ”Œ"
battery_status_discharging="ðŸ”‹"

columns=$(tmux -q display -p '#{client_width}' 2> /dev/null || echo 80)
if [ "${columns}" -ge 80 ]; then
  battery_bar_length=10
else
  battery_bar_length=5
fi

if [ "${discharging}" = "true" ]; then
  battery_status="${battery_status_discharging}"
else
  battery_status="${battery_status_charging}"
fi

if grep -q -E '^heat|gradient(,[#a-z0-9]{7,9})?$' <<< ${battery_bar_palette}; then
  # shellcheck disable=SC2086
  { set -f; IFS=,; set -- ${battery_bar_palette}; unset IFS; set +f; }
  palette_style=$1
  battery_bg=${2:-none}
  [ "${palette_style}" = "gradient" ] && \
    palette="196 202 208 214 220 226 190 154 118 82 46"
  [ "${palette_style}" = "heat" ] && \
    palette="243 245 247 144 143 142 184 214 208 202 196"

  palette=$(echo "${palette}" | awk -v n="${battery_bar_length}" '{ for (i = 0; i < n; ++i) printf $(1 + (i * NF / n))" " }')
  eval set -- "${palette}"

  full=$(awk "BEGIN { printf \"%.0f\", (${charge}) * ${battery_bar_length} }")
  battery_bar="#[bg=${battery_bg}]"
  # shellcheck disable=SC2046
  [ "${full}" -gt 0 ] && \
    battery_bar="${battery_bar}$(printf "#[fg=colour%s]${battery_bar_symbol_full}" $(echo "${palette}" | cut -d' ' -f1-"${full}"))"
  # shellcheck disable=SC2046
  empty=$((battery_bar_length - full))
  # shellcheck disable=SC2046
  [ "${empty}" -gt 0 ] && \
    battery_bar="${battery_bar}$(printf "#[fg=colour%s]${battery_bar_symbol_empty}" $(echo "${palette}" | cut -d' ' -f$((full + 1))-$((full + empty))))"
    eval battery_bar="${battery_bar}#[fg=colour\${$((full == 0 ? 1 : full))}]"
elif grep -q -E '^(([#a-z0-9]{7,9}|none),?){3}$' <<< "${battery_bar_palette}"; then
  # shellcheck disable=SC2086
  { set -f; IFS=,; set -- ${battery_bar_palette}; unset IFS; set +f; }
  battery_full_fg=$1
  battery_empty_fg=$2
  battery_bg=$3

  full=$(awk "BEGIN { printf \"%.0f\", (${charge}) * ${battery_bar_length} }")
  [ "${battery_bg}" != "none" ] && \
    battery_bar="#[bg=${battery_bg}]"
  #shellcheck disable=SC2046
  [ "${full}" -gt 0 ] && \
    battery_bar="${battery_bar}#[fg=${battery_full_fg}]$(printf "%0.s${battery_bar_symbol_full}" $(seq 1 "${full}"))"
  empty=$((battery_bar_length - full))
  #shellcheck disable=SC2046
  [ "${empty}" -gt 0 ] && \
    battery_bar="${battery_bar}#[fg=${battery_empty_fg}]$(printf "%0.s${battery_bar_symbol_empty}" $(seq 1 "${empty}"))" && \
    battery_bar="${battery_bar}#[fg=${battery_empty_fg}]"
fi

battery_percentage="$(awk "BEGIN { printf \"%.0f%%\", (${charge}) * 100 }")"

echo -e "${battery_status} ${battery_bar} ${battery_percentage}"
